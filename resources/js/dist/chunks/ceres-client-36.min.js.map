{"version":3,"sources":["webpack:///./resources/js/src/app/components/item/QuantityInput.vue","webpack:///resources/js/src/app/components/item/QuantityInput.vue","webpack:///./resources/js/src/app/components/item/QuantityInput.vue?f4be","webpack:///./resources/js/src/app/components/item/QuantityInput.vue?8dc2"],"names":["render","_vm","this","_c","_self","staticClass","directives","name","rawName","value","isMaximum","compMax","expression","class","disabled","waiting","useAppearance","attrs","title","maximumHint","$translate","on","click","$event","increaseValue","_v","ref","type","domProps","displayValue","change","setValue","target","isMinimum","minimumHint","decreaseValue","_withStripped","props","Number","required","timeout","default","min","max","interval","Boolean","variationId","insideBasket","data","compValue","compMin","compInterval","compDecimals","onValueChanged","created","_this","defaultValue","minDecimals","floatLength","intervalDecimals","Math","debounce","$emit","isNullOrUndefined","fetchQuantityFromBasket","computed","_objectSpread","variationBasketQuantity","_this2","itemSetVariationId","basketObject","$store","state","basket","items","find","variations","quantity","isDefined","$options","filters","numberFormat","possibleNumbers","numbers","i","push","displayValue2","get","set","parseFloat","itemSetId","getters","concat","variation","id","mapState","basketItems","watch","newValue","handler","oldValue","deep","newInterval","methods","formatFloat","diff","replace","App","decimalSeparator","isNaN","limit","$refs","quantityInputField","component"],"mappings":"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","file":"chunks/ceres-client-36.min.js","sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", { staticClass: \"qty-box d-flex h-100\" }, [\n    _c(\"div\", { staticClass: \"qty-btn-container d-flex flex-column\" }, [\n      _c(\n        \"button\",\n        {\n          directives: [\n            {\n              name: \"tooltip\",\n              rawName: \"v-tooltip\",\n              value: _vm.isMaximum && _vm.compMax !== 0,\n              expression: \"isMaximum && compMax !== 0\",\n            },\n          ],\n          staticClass:\n            \"btn qty-btn flex-fill d-flex justify-content-center p-0\",\n          class: {\n            disabled: _vm.isMaximum || _vm.waiting,\n            \"btn-appearance\": _vm.useAppearance,\n          },\n          attrs: {\n            \"data-toggle\": \"tooltip\",\n            \"data-placement\": \"top\",\n            \"data-testing\": \"quantity-btn-increase\",\n            title: _vm.maximumHint,\n            \"aria-label\": _vm.$translate(\n              \"Ceres::Template.itemQuantityInputIncrease\"\n            ),\n          },\n          on: {\n            click: function ($event) {\n              return _vm.increaseValue()\n            },\n          },\n        },\n        [\n          _c(\"i\", {\n            staticClass: \"fa fa-plus default-float\",\n            attrs: { \"aria-hidden\": \"true\" },\n          }),\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"input\", {\n        ref: \"quantityInputField\",\n        staticClass: \"qty-input text-center\",\n        attrs: {\n          type: \"text\",\n          disabled: _vm.waiting,\n          \"aria-label\": _vm.$translate(\"Ceres::Template.itemQuantityInput\"),\n        },\n        domProps: { value: _vm.displayValue },\n        on: {\n          change: function ($event) {\n            return _vm.setValue($event.target.value)\n          },\n        },\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"button\",\n        {\n          directives: [\n            {\n              name: \"tooltip\",\n              rawName: \"v-tooltip\",\n              value: _vm.isMinimum && _vm.compMax !== 0,\n              expression: \"isMinimum && compMax !== 0\",\n            },\n          ],\n          staticClass:\n            \"btn qty-btn flex-fill d-flex justify-content-center p-0\",\n          class: {\n            disabled: _vm.isMinimum || _vm.waiting,\n            \"btn-appearance\": _vm.useAppearance,\n          },\n          attrs: {\n            \"data-toggle\": \"tooltip\",\n            \"data-placement\": \"bottom\",\n            \"data-testing\": \"quantity-btn-decrease\",\n            title: _vm.minimumHint,\n            \"aria-label\": _vm.$translate(\n              \"Ceres::Template.itemQuantityInputDecrease\"\n            ),\n          },\n          on: {\n            click: function ($event) {\n              return _vm.decreaseValue()\n            },\n          },\n        },\n        [\n          _c(\"i\", {\n            staticClass: \"fa fa-minus default-float\",\n            attrs: { \"aria-hidden\": \"true\" },\n          }),\n        ]\n      ),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"qty-box d-flex h-100\">\n    <div class=\"qty-btn-container d-flex flex-column\">\n      <button\n        class=\"btn qty-btn flex-fill d-flex justify-content-center p-0\"\n        @click=\"increaseValue()\"\n        :class=\"{\n          disabled: isMaximum || waiting,\n          'btn-appearance': useAppearance,\n        }\"\n        v-tooltip=\"isMaximum && compMax !== 0\"\n        data-toggle=\"tooltip\"\n        data-placement=\"top\"\n        data-testing=\"quantity-btn-increase\"\n        :title=\"maximumHint\"\n        :aria-label=\"$translate('Ceres::Template.itemQuantityInputIncrease')\"\n      >\n        <i class=\"fa fa-plus default-float\" aria-hidden=\"true\"></i>\n      </button>\n      <input\n        class=\"qty-input text-center\"\n        type=\"text\"\n        :value=\"displayValue\"\n        @change=\"setValue($event.target.value)\"\n        :disabled=\"waiting\"\n        ref=\"quantityInputField\"\n        :aria-label=\"$translate('Ceres::Template.itemQuantityInput')\"\n      />\n\n      <button\n        class=\"btn qty-btn flex-fill d-flex justify-content-center p-0\"\n        @click=\"decreaseValue()\"\n        :class=\"{\n          disabled: isMinimum || waiting,\n          'btn-appearance': useAppearance,\n        }\"\n        v-tooltip=\"isMinimum && compMax !== 0\"\n        data-toggle=\"tooltip\"\n        data-placement=\"bottom\"\n        data-testing=\"quantity-btn-decrease\"\n        :title=\"minimumHint\"\n        :aria-label=\"$translate('Ceres::Template.itemQuantityInputDecrease')\"\n      >\n        <i class=\"fa fa-minus default-float\" aria-hidden=\"true\"></i>\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { floatLength, formatFloat, limit } from \"../../helper/number\";\nimport { defaultValue, isDefined, isNullOrUndefined } from \"../../helper/utils\";\nimport { debounce } from \"../../helper/debounce\";\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"quantity-input\",\n\n  props: {\n    value: {\n      type: Number,\n      required: true,\n    },\n    timeout: {\n      type: Number,\n      required: false,\n      default: 500,\n    },\n    min: {\n      type: Number,\n      required: false,\n      default: 0,\n    },\n    max: {\n      type: Number,\n      required: false,\n    },\n    interval: {\n      type: Number,\n      required: false,\n      default: 1,\n    },\n    waiting: {\n      type: Boolean,\n      required: false,\n    },\n    variationId: {\n      type: Number,\n      required: false,\n    },\n    insideBasket: {\n      type: Boolean,\n      required: false,\n      default: false,\n    },\n    useAppearance: Boolean,\n  },\n\n  data() {\n    return {\n      compValue: this.value,\n      compMin: this.min,\n      compMax: this.max,\n      compInterval: this.interval,\n      compDecimals: 0,\n      onValueChanged: null,\n    };\n  },\n\n  created() {\n    this.compInterval = defaultValue(this.compInterval, 1);\n    this.compInterval = this.compInterval === 0 ? 1 : this.compInterval;\n\n    const minDecimals = floatLength(this.min);\n    const intervalDecimals = floatLength(this.compInterval);\n\n    this.compDecimals = Math.max(minDecimals, intervalDecimals);\n\n    this.onValueChanged = debounce(() => {\n      this.$emit(\"quantity-change\", this.compValue);\n    }, defaultValue(this.timeout, 500));\n\n    if (!isNullOrUndefined(this.variationId)) {\n      this.fetchQuantityFromBasket();\n    }\n  },\n\n  computed: {\n    variationBasketQuantity() {\n      if (isNullOrUndefined(this.variationId)) {\n        return 0;\n      }\n\n      if (\n        this.itemSetVariationId <= 0 ||\n        this.variationId === this.itemSetVariationId\n      ) {\n        const basketObject = this.$store.state.basket.items.find(\n          (variations) => variations.variationId === this.variationId\n        );\n\n        return basketObject ? basketObject.quantity : 0;\n      }\n\n      return 0;\n    },\n\n    isMinimum() {\n      return (\n        isDefined(this.compMin) &&\n        this.compValue - this.compInterval < this.compMin\n      );\n    },\n\n    isMaximum() {\n      return (\n        isDefined(this.compMax) &&\n        this.compValue + this.compInterval > this.compMax\n      );\n    },\n\n    minimumHint() {\n      return this.$translate(\"Ceres::Template.singleItemQuantityMin\", {\n        min: this.$options.filters.numberFormat(this.compMin),\n      });\n    },\n\n    maximumHint() {\n      return this.$translate(\"Ceres::Template.singleItemQuantityMax\", {\n        max: this.$options.filters.numberFormat(this.max),\n      });\n    },\n\n    displayValue() {\n      return this.$options.filters.numberFormat(this.compValue);\n    },\n    possibleNumbers() {\n      const numbers = [];\n      for (let i = this.compMin; i <= this.compMax; i += this.compInterval) {\n        numbers.push(i);\n      }\n      return numbers;\n    },\n\n    displayValue2: {\n      get() {\n        return this.$options.filters.numberFormat(this.compValue);\n      },\n      set(value) {\n        this.setValue(parseFloat(value));\n      },\n    },\n\n    itemSetVariationId() {\n      if (this.$store.state.items.itemSetId > 0) {\n        return this.$store.getters[\n          `${this.$store.state.items.itemSetId}/currentItemVariation`\n        ].variation.id;\n      }\n\n      return 0;\n    },\n\n    ...mapState({\n      basketItems: (state) => state.basket.items,\n    }),\n  },\n\n  watch: {\n    variationId(newValue) {\n      if (isDefined(newValue)) {\n        this.fetchQuantityFromBasket();\n      }\n    },\n\n    basketItems: {\n      handler(newValue, oldValue) {\n        if (isDefined(this.variationId)) {\n          this.fetchQuantityFromBasket();\n        }\n      },\n      deep: true,\n    },\n\n    min(newValue) {\n      this.compMin = newValue;\n      this.fetchQuantityFromBasket();\n    },\n\n    max(newValue) {\n      this.compMax = newValue;\n      this.fetchQuantityFromBasket();\n    },\n\n    value(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.setValue(newValue);\n      }\n    },\n\n    interval(newInterval) {\n      this.compInterval = defaultValue(newInterval, 1);\n    },\n  },\n\n  methods: {\n    increaseValue() {\n      const newValue = formatFloat(\n        this.compValue + this.compInterval,\n        this.compDecimals\n      );\n\n      if (\n        (isNullOrUndefined(this.compMax) || newValue <= this.compMax) &&\n        !this.waiting\n      ) {\n        this.setValue(newValue);\n      }\n    },\n\n    decreaseValue() {\n      const newValue = formatFloat(\n        this.compValue - this.compInterval,\n        this.compDecimals\n      );\n\n      if (\n        (isNullOrUndefined(this.compMin) || newValue >= this.compMin) &&\n        !this.waiting\n      ) {\n        this.setValue(newValue);\n      }\n    },\n\n    setValue(value) {\n      // consider the configured decimal seperator (if the input is typed in the input field)\n      if (typeof value === \"string\") {\n        value = value.replace(App.decimalSeparator || \",\", \".\");\n      }\n\n      value = parseFloat(value);\n      if (isNaN(value)) {\n        value = defaultValue(this.compMin, 1);\n      }\n\n      // limit new value to min/ max value\n      value = limit(value, this.compMin, this.compMax);\n\n      // make sure, new value is an even multiple of interval\n      let diff;\n      if (this.variationBasketQuantity === 0 && this.min !== 0) {\n        diff = formatFloat(\n          (value - this.min) % this.compInterval,\n          this.compDecimals,\n          true\n        );\n      } else {\n        diff = formatFloat(value % this.compInterval, this.compDecimals, true);\n      }\n\n      if (diff > 0 && diff !== this.compInterval) {\n        if (diff < this.compInterval / 2) {\n          value -= diff;\n        } else {\n          value += this.compInterval - diff;\n        }\n        value = limit(value, this.compMin, this.compMax);\n      }\n\n      // cut fraction\n      value = formatFloat(value, this.compDecimals);\n\n      if (value !== this.compValue) {\n        this.compValue = value;\n        this.onValueChanged();\n      } else if (!isNullOrUndefined(this.$refs.quantityInputField)) {\n        this.$refs.quantityInputField.value = this.displayValue;\n      }\n    },\n\n    fetchQuantityFromBasket() {\n      if (\n        !isNullOrUndefined(this.min) &&\n        this.variationBasketQuantity >= this.min &&\n        this.variationBasketQuantity !== 0\n      ) {\n        // set the minimum value to the interval, if the item is already in the basket\n        this.compMin = this.compInterval;\n      } else if (this.variationBasketQuantity === 0) {\n        // reset the minimum, when item is not in the basket\n        this.compMin = this.min;\n      }\n\n      if (!isNullOrUndefined(this.max)) {\n        // decrease maximum quantity by quantity of variations already in basket\n        this.compMax = this.max - this.variationBasketQuantity;\n\n        if (this.variationBasketQuantity + this.compInterval > this.max) {\n          this.compMin = 0;\n          this.compMax = 0;\n          this.$emit(\"out-of-stock\", true);\n        } else {\n          this.$emit(\"out-of-stock\", false);\n        }\n      } else {\n        this.$emit(\"out-of-stock\", false);\n      }\n\n      this.setValue(this.compMin);\n    },\n  },\n};\n</script>","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./QuantityInput.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./QuantityInput.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./QuantityInput.vue?vue&type=template&id=2b515bda&\"\nimport script from \"./QuantityInput.vue?vue&type=script&lang=js&\"\nexport * from \"./QuantityInput.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}